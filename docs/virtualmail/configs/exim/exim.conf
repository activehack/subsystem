hide pgsql_servers = @SQL_HOST;/@SQL_DB;/@SQL_USER;/@SQL_PASSWORD;
dns_ipv4_lookup = *
# primary_hostname =
smtp_banner = "@EXIM_BANNER;"
smtp_active_hostname = "@EXIM_HOST;"

domainlist local_domains = ${lookup pgsql {SELECT "domain" FROM "domains" WHERE "domain"='${quote_pgsql:$domain}' AND "status"='OK'}}
domainlist relay_to_domains =
hostlist   relay_from_hosts = localhost

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data

# av_scanner = clamd:/run/clamav/clamd.sock
# spamd_address = 127.0.0.1 11333 variant=rspamd

#av_scanner = clamd:@CLAMD_HOST; 3310 retry=10s
spamd_address = @SPAMD_HOST; 783

tls_advertise_hosts = *

#tls_certificate = /opt/certs/default/fullchain1.pem
#tls_privatekey = /opt/certs/default/privkey1.pem
#tls_dhparam = /opt/dhparam.pem

tls_certificate = /opt/certs/@PRIMARY_DOMAIN;/fullchain1.pem
tls_privatekey = /opt/certs/@PRIMARY_DOMAIN;/privkey1.pem
tls_dhparam = /opt/dhparam.pem

daemon_smtp_ports = 25 : 465 : 587
tls_on_connect_ports = 465

# qualify_domain =
# qualify_recipient =
# allow_domain_literals

never_users = root
host_lookup = *

#rfc1413_hosts = *
#rfc1413_query_timeout = 5s

prdr_enable = true

log_selector = +smtp_protocol_error +smtp_syntax_error +tls_certificate_verified

# percent_hack_domains =

ignore_bounce_errors_after = 2d

timeout_frozen_after = 7d

# split_spool_directory = true
# check_rfc2047_length = false
# accept_8bitmime = false

# keep_environment = ^LDAP
# add_environment = PATH=/usr/bin::/bin


begin acl
acl_check_rcpt:
  accept  hosts = :
          control = dkim_disable_verify

  deny    message       = Restricted characters in address
          domains       = +local_domains
          local_parts   = ^[.] : ^.*[@%!/|]

  deny    message       = Restricted characters in address
          domains       = !+local_domains
          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
	  
  deny
      message     = [SPF] $sender_host_address is not allowed to send mail from $sender_address_domain.
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{1}{true}{false}}
      log_message = X-SPF-Test: $runrc

  warn
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{2}{true}{false}}
       add_header = X-SPF-Test: $runrc
      log_message = X-SPF-Test: $runrc

  warn
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{3}{true}{false}}
       add_header = X-SPF-Test: $runrc
      log_message = X-SPF-Test: $runrc

  warn
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{4}{true}{false}}
       add_header = X-SPF-Test: $runrc
      log_message = X-SPF-Test: $runrc

  warn
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{5}{true}{false}}
       add_header = X-SPF-Test: $runrc
      log_message = X-SPF-Test: $runrc

  warn
      log_message = SPF check failed.
      set acl_m9  = -ipv4=$sender_host_address -sender=$sender_address -helo=$sender_helo_name
      set acl_m9  = ${run{/usr/bin/spfquery $acl_m9}}
      condition   = ${if eq {$runrc}{6}{true}{false}}
       add_header = X-SPF-Test: $runrc
      log_message = X-SPF-Test: $runrc


  accept  local_parts   = postmaster
          domains       = +local_domains

  require verify        = sender

  accept  hosts         = +relay_from_hosts
          control       = submission
          control       = dkim_disable_verify

  accept  authenticated = *
          control       = submission
          control       = dkim_disable_verify

  require message	= nice hosts say HELO first
          condition	= ${if def:sender_helo_name}

  require message = relay not permitted
          domains = +local_domains : +relay_to_domains

  require verify = recipient

  # deny    message       = rejected because $sender_host_address is in a black list at $dnslist_domain\n$dnslist_text
  #         dnslists      = black.list.example
  
  # warn    dnslists      = black.list.example
  #         add_header    = X-Warning: $sender_host_address is in a black list at $dnslist_domain
  #         log_message   = found in $dnslist_domain
  
  # require verify = csa

  accept


acl_check_data:
  
  deny    message    = maximum allowed line length is 998 octets, \
                       got $max_received_linelength
          condition  = ${if > {$max_received_linelength}{998}}
  
  deny	  !verify =	header_syntax
	  message =	header syntax
	  log_message = header syntax ($acl_verify_message)

  # deny    malware    = *
  #         message    = This message contains a virus ($malware_name).

   warn    spam       = nobody
           add_header = X-Spam_score: $spam_score\n\
                        X-Spam_score_int: $spam_score_int\n\
                        X-Spam_bar: $spam_bar\n\
                        X-Spam_report: $spam_report

  # Accept the message.

  accept


begin routers

# domain_literal:
#   driver = ipliteral
#   domains = ! +local_domains
#   transport = remote_smtp

dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
# if ipv6-enabled then instead use:
# ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  no_more

# smarthost:
#   driver = manualroute
#   domains = ! +local_domains
#   transport = remote_smtp
#   route_data = MAIL.HOSTNAME.FOR.CENTRAL.SERVER.EXAMPLE
#   ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
#   no_more

#system_aliases:
#  driver = redirect
#  allow_fail
#  allow_defer
#  data = ${lookup{$local_part}lsearch{/etc/mail/aliases}}
## user = exim
#  file_transport = address_file
#  pipe_transport = address_pipe

virtual_list:
  driver = redirect
  allow_fail
  allow_defer
  data = ${lookup pgsql { \
    SELECT "list_members"."member_email"\
    FROM "list_accounts", "list_members"\
    WHERE ("list_accounts"."name"||'@'||"list_accounts"."domain") = "list_members"."list_account"\
    AND "list_accounts"."name"='${quote_pgsql:$local_part}'\
    AND "list_accounts"."domain"='${quote_pgsql:$domain}'\
    AND "list_accounts"."status"='OK'\
    AND "list_members"."status"='OK'}}

#localuser:
#  driver = accept
#  check_local_user
## local_part_suffix = +* : -*
## local_part_suffix_optional
#  transport = local_delivery
#  cannot_route_message = Unknown user

virtual_route:
  driver    = accept
  condition = ${lookup pgsql {\
  SELECT "username"||'@'||"domain"\
  FROM "accounts" WHERE "username"='${quote_pgsql:$local_part}'\
  AND "domain"='${quote_pgsql:$domain}'\
  AND "status"='OK'\
  }} 
  domains   = +local_domains
  local_part_suffix = "-*"
  local_part_suffix_optional
  transport = dovecot_delivery

begin transports

remote_smtp:
  driver = smtp  
  dkim_canon = relaxed
  dkim_domain = ${sg{${lc:${domain:$h_from:}}}{^www\.}{}}
  dkim_private_key = /opt/certs/${sg{${lc:${domain:$h_from:}}}{^www\.}{}}/privkey1.pem
  dkim_selector = mars
  message_size_limit = ${if > {$max_received_linelength}{998} {1}{0}}

dovecot_delivery:
  driver = smtp
  rcpt_include_affixes
  delivery_date_add
  envelope_to_add
  return_path_add
  hosts = @LMTP_HOST;
  protocol = lmtp
  port = 24

address_pipe:
  driver = pipe
  return_output

address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

address_reply:
  driver = autoreply

begin retry

# Address or Domain    Error       Retries
# -----------------    -----       -------
*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite

begin authenticators

PLAIN:  
  driver                     = plaintext
  public_name                = PLAIN
  server_set_id              = $auth2
  # username: $auth2, password: $auth3
  server_advertise_condition = ${if eq{$tls_in_cipher}{}{no}{yes}}
  server_condition =  ${if and { {!eq{$auth2}{}} {!eq{$auth3}{}} \
                      {eq{$auth3}{${lookup pgsql{SELECT "secret" FROM "accounts"\
		      WHERE "domain" = '${quote_pgsql:${domain:$auth2}}'\
		      AND "username"='${quote_pgsql:${local_part:$auth2}}'}{$value}fail}} }} {yes}{no}}
  

LOGIN:   
  driver                     = plaintext
  public_name                = LOGIN
  server_set_id              = $auth1
  server_prompts             = Username:: : Password::
  # username: $auth1, password: $auth2
  server_advertise_condition = ${if eq{$tls_cipher}{}{no}{yes}}
  server_condition =  ${if and { {!eq{$auth1}{}} {!eq{$auth2}{}} \
                      {eq{$auth2}{${lookup pgsql{SELECT "secret" FROM "accounts"\
		      WHERE "domain" = '${quote_pgsql:${local_part:$auth1}}'\
		      AND "username"='${quote_pgsql:${local_part:$auth1}}'}{$value}fail}} }} {yes}{no}}

######################################################################
#                   CONFIGURATION FOR local_scan()                   #
######################################################################

# If you have built Exim to include a local_scan() function that contains
# tables for private options, you can define those options here. Remember to
# uncomment the "begin" line. It is commented by default because it provokes
# an error with Exim binaries that are not built with LOCAL_SCAN_HAS_OPTIONS
# set in the Local/Makefile.

# begin local_scan


# End of Exim configuration file
